import torch
from imports.TrainModel import TrainModel
from tuner import model2
from torch_geometric.transforms import RandomJitter, Compose, Cartesian
import os

# Force CPU mode
os.environ['CUDA_VISIBLE_DEVICES'] = ''
torch.cuda.is_available = lambda: False

def train_all_graph_types():
    """Train models for each graph type - WORKING VERSION"""
    
    # Graph types from our successful runs
    graph_types = ['dir_spike_count_w', 'undir_spike_count_w', 'undir_spike_count', 'dir_time']
    
    transform = Compose([RandomJitter((0.003, 0.003)), Cartesian(cat=False, norm=True)])
    results = {}
    
    # Feature mapping for different graph types
    feature_mapping = {
        'dir_spike_count_w': 1,
        'undir_spike_count': 1,
        'dir_time': 1,
        'undir_spike_count_w': 1
    }

    for graph_type in graph_types:
        print(f"\n{'='*50}")
        print(f"Graph {graph_type}")
        print(f"{'='*50}")
        
        # Get input features for current graph type
        input_features = feature_mapping.get(graph_type, 1)
        
        # Create model - NO pooling override
        model = model2(input_features=input_features)
        
        # Train model
        tm = TrainModel(
            f'data_{graph_type}',
            model, 
            lr=0.001, 
            features='pol',
            batch=4, 
            n_epochs=200,  # Full training epochs
            experiment_name=f'model2_{graph_type}',
            desc=f'Model2 comparison - {graph_type}',
            merge_test_val=False,
            transform=transform,
            loss_func=torch.nn.CrossEntropyLoss()
        )
        
        # Train and test
        try:
            tm.train()
            test_loss = tm.test()
            print(f"{graph_type} completed - Test Loss: {test_loss:.4f}")
        except Exception as e:
            print(f"Training failed for {graph_type}: {e}")
            test_loss = float('inf')
        
        results[graph_type] = test_loss
    
    # Compare results
    print(f"\n{'='*50}")
    print("COMPARISON RESULTS:")
    print(f"{'='*50}")
    
    # Sort by performance (lowest loss = best)
    sorted_results = sorted(results.items(), key=lambda x: x[1])
    
    for i, (graph_type, loss) in enumerate(sorted_results, 1):
        print(f"{i}. {graph_type}: {loss:.4f}")
    
    print(f"\nBEST GRAPH TYPE: {sorted_results[0][0]}")
    print(f"BEST TEST LOSS: {sorted_results[0][1]:.4f}")
    
    return results

if __name__ == "__main__":
    results = train_all_graph_types()
